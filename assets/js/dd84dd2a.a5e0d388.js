"use strict";(self.webpackChunkai_cookbook=self.webpackChunkai_cookbook||[]).push([[5936],{2745:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"cursor-integration/2-2-backend","title":"\u2699\ufe0f Backend","description":"Sau khi s\u1eed d\u1ee5ng c\xe1c m\u1eabu prompt n\xe0y, backend developer s\u1ebd c\xf3 kh\u1ea3 n\u0103ng:","source":"@site/docs/1-cursor-integration/2-2-backend.md","sourceDirName":"1-cursor-integration","slug":"/cursor-integration/2-2-backend","permalink":"/ai-cookbook/cursor-integration/2-2-backend","draft":false,"unlisted":false,"editUrl":"https://github.com/hiro-pna/ai-cookbook/tree/main/docs/1-cursor-integration/2-2-backend.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfa8 Frontend","permalink":"/ai-cookbook/cursor-integration/2-1-frontend"},"next":{"title":"\ud83d\ude80 DevOpp","permalink":"/ai-cookbook/cursor-integration/2-3-devops"}}');var i=t(4848),o=t(8453);const s={sidebar_position:4},a="\u2699\ufe0f Backend",c={},d=[{value:"\ud83d\ude80 C\xe1c K\u1ecbch B\u1ea3n Ph\xe1t Tri\u1ec3n Workflow",id:"-c\xe1c-k\u1ecbch-b\u1ea3n-ph\xe1t-tri\u1ec3n-workflow",level:2},{value:"1\ufe0f\u20e3 <strong>T\u1ea1o CRUD Operations t\u1eeb Database Schema</strong>",id:"1\ufe0f\u20e3-t\u1ea1o-crud-operations-t\u1eeb-database-schema",level:3},{value:"\u2615 <strong>M\u1eabu: Spring Boot Full Stack</strong>",id:"-m\u1eabu-spring-boot-full-stack",level:4},{value:"\ud83d\udd37 <strong>M\u1eabu: .NET Core Clean Architecture</strong>",id:"-m\u1eabu-net-core-clean-architecture",level:4},{value:"2\ufe0f\u20e3 <strong>Thi\u1ebft K\u1ebf API &amp; Documentation</strong>",id:"2\ufe0f\u20e3-thi\u1ebft-k\u1ebf-api--documentation",level:3},{value:"\ud83d\udce1 <strong>M\u1eabu: OpenAPI Specification</strong>",id:"-m\u1eabu-openapi-specification",level:4},{value:"\ud83d\udd12 <strong>M\u1eabu: Authentication &amp; Authorization</strong>",id:"-m\u1eabu-authentication--authorization",level:4},{value:"3\ufe0f\u20e3 <strong>Thi\u1ebft K\u1ebf Database &amp; T\u1ed1i \u01afu H\xf3a</strong>",id:"3\ufe0f\u20e3-thi\u1ebft-k\u1ebf-database--t\u1ed1i-\u01b0u-h\xf3a",level:3},{value:"\ud83d\uddc4\ufe0f <strong>M\u1eabu: Thi\u1ebft K\u1ebf Database Ph\u1ee9c T\u1ea1p</strong>",id:"\ufe0f-m\u1eabu-thi\u1ebft-k\u1ebf-database-ph\u1ee9c-t\u1ea1p",level:4},{value:"\ud83d\udd0d <strong>M\u1eabu: T\u1ed1i \u01afu H\xf3a Query</strong>",id:"-m\u1eabu-t\u1ed1i-\u01b0u-h\xf3a-query",level:4},{value:"4\ufe0f\u20e3 <strong>Chi\u1ebfn L\u01b0\u1ee3c Testing</strong>",id:"4\ufe0f\u20e3-chi\u1ebfn-l\u01b0\u1ee3c-testing",level:3},{value:"\ud83e\uddea <strong>M\u1eabu: Unit Testing</strong>",id:"-m\u1eabu-unit-testing",level:4},{value:"\ud83d\udd17 <strong>M\u1eabu: Integration Testing</strong>",id:"-m\u1eabu-integration-testing",level:4},{value:"5\ufe0f\u20e3 <strong>Hi\u1ec7u Su\u1ea5t &amp; Gi\xe1m S\xe1t</strong>",id:"5\ufe0f\u20e3-hi\u1ec7u-su\u1ea5t--gi\xe1m-s\xe1t",level:3},{value:"\u26a1 <strong>M\u1eabu: T\u1ed1i \u01afu H\xf3a Hi\u1ec7u Su\u1ea5t</strong>",id:"-m\u1eabu-t\u1ed1i-\u01b0u-h\xf3a-hi\u1ec7u-su\u1ea5t",level:4},{value:"\ud83d\udcca <strong>M\u1eabu: Gi\xe1m S\xe1t &amp; Observability</strong>",id:"-m\u1eabu-gi\xe1m-s\xe1t--observability",level:4},{value:"\ud83c\udfaf Best Practices &amp; Tips",id:"-best-practices--tips",level:2},{value:"\ud83d\udca1 <strong>Tip Prompt Engineering</strong>",id:"-tip-prompt-engineering",level:3},{value:"\u2705 <strong>Prompting Hi\u1ec7u Qu\u1ea3 cho Backend:</strong>",id:"-prompting-hi\u1ec7u-qu\u1ea3-cho-backend",level:4},{value:"\ud83c\udfd7\ufe0f <strong>Context IS KING:</strong>",id:"\ufe0f-context-is-king",level:4},{value:"\ud83d\udd04 <strong>Ph\xe1t Tri\u1ec3n L\u1eb7p L\u1ea1i:</strong>",id:"-ph\xe1t-tri\u1ec3n-l\u1eb7p-l\u1ea1i",level:4},{value:"\ud83d\ude80 <strong>K\u1ef9 Thu\u1eadt N\xe2ng Cao</strong>",id:"-k\u1ef9-thu\u1eadt-n\xe2ng-cao",level:3},{value:"\ud83d\udcda <strong>Tham Kh\u1ea3o M\xe3 Hi\u1ec7n C\xf3:</strong>",id:"-tham-kh\u1ea3o-m\xe3-hi\u1ec7n-c\xf3",level:4},{value:"\ud83d\udd17 <strong>Chu\u1ed7i Workflows Ph\u1ee9c T\u1ea1p:</strong>",id:"-chu\u1ed7i-workflows-ph\u1ee9c-t\u1ea1p",level:4}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\ufe0f-backend",children:"\u2699\ufe0f Backend"})}),"\n",(0,i.jsxs)(n.admonition,{title:"\ud83c\udfaf M\u1ee5c ti\xeau",type:"info",children:[(0,i.jsx)(n.p,{children:"Sau khi s\u1eed d\u1ee5ng c\xe1c m\u1eabu prompt n\xe0y, backend developer s\u1ebd c\xf3 kh\u1ea3 n\u0103ng:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u26a1 ",(0,i.jsx)(n.strong,{children:"T\u0103ng t\u1ed1c ph\xe1t tri\u1ec3n"})," v\u1edbi c\xe1c prompt \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u h\xf3a"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,i.jsx)(n.strong,{children:"T\u1ea1o m\xe3 ngu\u1ed3n ch\u1ea5t l\u01b0\u1ee3ng cao"})," tu\xe2n th\u1ee7 best practices"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,i.jsx)(n.strong,{children:"G\u1ee1 l\u1ed7i hi\u1ec7u qu\u1ea3"})," v\u1edbi s\u1ef1 h\u1ed7 tr\u1ee3 c\u1ee7a AI"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfd7\ufe0f ",(0,i.jsx)(n.strong,{children:"X\xe2y d\u1ef1ng API services"})," nhanh ch\xf3ng v\xe0 nh\u1ea5t qu\xe1n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-c\xe1c-k\u1ecbch-b\u1ea3n-ph\xe1t-tri\u1ec3n-workflow",children:"\ud83d\ude80 C\xe1c K\u1ecbch B\u1ea3n Ph\xe1t Tri\u1ec3n Workflow"}),"\n",(0,i.jsxs)(n.h3,{id:"1\ufe0f\u20e3-t\u1ea1o-crud-operations-t\u1eeb-database-schema",children:["1\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"T\u1ea1o CRUD Operations t\u1eeb Database Schema"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf T\xecnh hu\u1ed1ng:"})," Kh\u1edfi t\u1ea1o nhanh m\u1ed9t feature slice ho\xe0n ch\u1ec9nh t\u1eeb database design."]}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-spring-boot-full-stack",children:["\u2615 ",(0,i.jsx)(n.strong,{children:"M\u1eabu: Spring Boot Full Stack"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"T\u1ea1o m\u1ed9t complete feature slice cho Product Management trong Spring Boot.\n\n**Context:**\n- Framework: Spring Boot 3.2 + Java 17\n- Database: PostgreSQL v\u1edbi JPA/Hibernate\n- Architecture: Layered architecture (Controller \u2192 Service \u2192 Repository)\n- Security: JWT authentication v\u1edbi Spring Security\n- Documentation: OpenAPI 3.0 v\u1edbi Springdoc\n\n**Database Schema:**\nCREATE TABLE products (\n    id BIGSERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10,2) NOT NULL CHECK (price > 0),\n    stock_quantity INTEGER NOT NULL DEFAULT 0,\n    category_id BIGINT NOT NULL,\n    sku VARCHAR(100) UNIQUE NOT NULL,\n    is_active BOOLEAN DEFAULT true,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    created_by VARCHAR(100),\n    updated_by VARCHAR(100),\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\n**Requirements:**\n\n**1. JPA Entity:**\n- Audit fields v\u1edbi `@CreationTimestamp`, `@UpdateTimestamp`\n- Validation annotations (`@NotNull`, `@Positive`, `@Size`)\n- Relationship mapping v\u1edbi Category entity\n- Custom equals/hashCode based on business key\n\n**2. Repository Layer:**\n- Extend `JpaRepository<Product, Long>`\n- Custom query methods v\u1edbi `@Query`\n- Specification-based dynamic queries\n- Pagination v\xe0 sorting support\n\n**3. Service Layer:**\n- Interface v\xe0 implementation separation\n- DTO mapping v\u1edbi MapStruct\n- Business validation rules\n- Transaction management v\u1edbi `@Transactional`\n\n**4. Controller Layer:**\n- RESTful endpoints (`/api/v1/products`)\n- Request/Response DTOs\n- Validation v\u1edbi `@Valid`\n- OpenAPI documentation annotations\n\n**5. Exception Handling:**\n- Custom exceptions (`ProductNotFoundException`)\n- Global exception handler v\u1edbi `@ControllerAdvice`\n- Structured error responses\n\n**Expected File Structure:**\nsrc/main/java/com/company/product/\n\u251c\u2500\u2500 entity/\n\u2502   \u2514\u2500\u2500 Product.java\n\u251c\u2500\u2500 repository/\n\u2502   \u2514\u2500\u2500 ProductRepository.java\n\u251c\u2500\u2500 service/\n\u2502   \u251c\u2500\u2500 ProductService.java\n\u2502   \u2514\u2500\u2500 ProductServiceImpl.java\n\u251c\u2500\u2500 controller/\n\u2502   \u2514\u2500\u2500 ProductController.java\n\u251c\u2500\u2500 dto/\n\u2502   \u251c\u2500\u2500 ProductRequestDto.java\n\u2502   \u251c\u2500\u2500 ProductResponseDto.java\n\u2502   \u2514\u2500\u2500 ProductUpdateDto.java\n\u251c\u2500\u2500 mapper/\n\u2502   \u2514\u2500\u2500 ProductMapper.java\n\u2514\u2500\u2500 exception/\n    \u2514\u2500\u2500 ProductNotFoundException.java\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-net-core-clean-architecture",children:["\ud83d\udd37 ",(0,i.jsx)(n.strong,{children:"M\u1eabu: .NET Core Clean Architecture"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Implement Product Management feature trong .NET 8 v\u1edbi Clean Architecture.\n\n**Architecture Layers:**\n- **Domain:** Entities, Value Objects, Domain Services\n- **Application:** Use Cases, DTOs, Interfaces\n- **Infrastructure:** Data Access, External Services\n- **Presentation:** API Controllers, Middleware\n\n**Domain Requirements:**\n// Domain Entity\npublic class Product : BaseEntity\n{\n    public string Name { get; private set; }\n    public string Description { get; private set; }\n    public Money Price { get; private set; }\n    public int StockQuantity { get; private set; }\n    public ProductSku Sku { get; private set; }\n    public CategoryId CategoryId { get; private set; }\n    public bool IsActive { get; private set; }\n    \n    // Domain methods\n    public void UpdatePrice(Money newPrice);\n    public void AdjustStock(int quantity);\n    public void Activate();\n    public void Deactivate();\n}\n\n**Application Layer:**\n- **CQRS pattern** v\u1edbi MediatR\n- **Command/Query separation**\n- **Validation** v\u1edbi FluentValidation\n- **Mapping** v\u1edbi AutoMapper\n\n**Use Cases to Implement:**\n1. `CreateProductCommand` - T\u1ea1o s\u1ea3n ph\u1ea9m m\u1edbi\n2. `UpdateProductCommand` - C\u1eadp nh\u1eadt th\xf4ng tin\n3. `GetProductQuery` - L\u1ea5y th\xf4ng tin s\u1ea3n ph\u1ea9m\n4. `GetProductsQuery` - L\u1ea5y danh s\xe1ch v\u1edbi filtering\n5. `DeleteProductCommand` - X\xf3a s\u1ea3n ph\u1ea9m\n\n**Infrastructure:**\n- **EF Core** v\u1edbi Code First approach\n- **Repository pattern** implementation\n- **Unit of Work** pattern\n- **Database migrations**\n\n**API Layer:**\n- **Minimal APIs** ho\u1eb7c Controller-based\n- **Swagger/OpenAPI** documentation\n- **Versioning** support\n- **Rate limiting** v\xe0 **CORS** configuration\n\n**Error Handling:**\n- Custom exceptions v\u1edbi specific error codes\n- Global exception middleware\n- Structured logging v\u1edbi Serilog\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"2\ufe0f\u20e3-thi\u1ebft-k\u1ebf-api--documentation",children:["2\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Thi\u1ebft K\u1ebf API & Documentation"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf T\xecnh hu\u1ed1ng:"})," Thi\u1ebft k\u1ebf RESTful APIs chu\u1ea9n m\u1ef1c v\u1edbi comprehensive documentation."]}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-openapi-specification",children:["\ud83d\udce1 ",(0,i.jsx)(n.strong,{children:"M\u1eabu: OpenAPI Specification"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Design comprehensive OpenAPI 3.0 specification cho E-commerce Product API.\n\n**API Requirements:**\n\n**Base Configuration:**\n- Base URL: `https://api.example.com/v1`\n- Authentication: Bearer JWT tokens\n- Content-Type: `application/json`\n- Error format: RFC 7807 Problem Details\n\n**Endpoints to Design:**\n\n**1. Product Management:**\nGET    /products              # List products with filtering\nPOST   /products              # Create new product\nGET    /products/{id}         # Get product by ID\nPUT    /products/{id}         # Update product\nDELETE /products/{id}         # Delete product\nPATCH  /products/{id}/stock   # Update stock quantity\n\n**2. Advanced Features:**\nGET    /products/search       # Full-text search\nGET    /products/categories/{categoryId}  # Products by category\nPOST   /products/bulk         # Bulk operations\nGET    /products/export       # Export to CSV/Excel\n\n**Schema Definitions:**\nProductResponse:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int64\n      example: 123\n    name:\n      type: string\n      maxLength: 255\n      example: "Wireless Headphones"\n    description:\n      type: string\n      example: "High-quality noise-cancelling headphones"\n    price:\n      type: number\n      format: decimal\n      minimum: 0\n      example: 299.99\n    stockQuantity:\n      type: integer\n      minimum: 0\n      example: 50\n    sku:\n      type: string\n      pattern: "^[A-Z0-9-]+$"\n      example: "WH-001"\n    category:\n      $ref: \'#/components/schemas/CategoryResponse\'\n    isActive:\n      type: boolean\n      example: true\n    createdAt:\n      type: string\n      format: date-time\n    updatedAt:\n      type: string\n      format: date-time\n\n**Error Handling:**\n- 400: Bad Request v\u1edbi validation details\n- 401: Unauthorized\n- 403: Forbidden\n- 404: Not Found\n- 409: Conflict (duplicate SKU)\n- 422: Unprocessable Entity\n- 500: Internal Server Error\n\n**Query Parameters:**\n- Pagination: `page`, `size`, `sort`\n- Filtering: `category`, `priceMin`, `priceMax`, `inStock`\n- Search: `q` (full-text search)\n\n**Response Headers:**\n- `X-Total-Count`: Total number of items\n- `X-Page-Count`: Total number of pages\n- `Link`: Pagination links (RFC 5988)\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-authentication--authorization",children:["\ud83d\udd12 ",(0,i.jsx)(n.strong,{children:"M\u1eabu: Authentication & Authorization"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Implement JWT-based authentication system v\u1edbi role-based authorization.\n\n**Authentication Flow:**\n1. **Login:** Username/password \u2192 JWT access + refresh tokens\n2. **Token Refresh:** Refresh token \u2192 new access token\n3. **Logout:** Invalidate refresh token\n4. **Password Reset:** Email-based reset flow\n\n**Security Requirements:**\n\n**JWT Configuration:**\n- **Access Token:** 15 minutes expiry, contains user claims\n- **Refresh Token:** 7 days expiry, stored securely\n- **Algorithm:** RS256 v\u1edbi key rotation\n- **Claims:** userId, roles, permissions, iat, exp\n\n**Authorization Levels:**\npublic enum Role {\n    ADMIN("admin", Set.of(\n        Permission.PRODUCT_CREATE,\n        Permission.PRODUCT_UPDATE,\n        Permission.PRODUCT_DELETE,\n        Permission.USER_MANAGE\n    )),\n    MANAGER("manager", Set.of(\n        Permission.PRODUCT_CREATE,\n        Permission.PRODUCT_UPDATE,\n        Permission.PRODUCT_VIEW\n    )),\n    USER("user", Set.of(\n        Permission.PRODUCT_VIEW\n    ));\n}\n\n**Security Implementation:**\n- **Password hashing:** BCrypt v\u1edbi salt rounds 12\n- **Rate limiting:** 5 login attempts per 15 minutes\n- **Account lockout:** After 5 failed attempts\n- **Session management:** Redis-based token blacklist\n- **CSRF protection:** For web clients\n- **CORS configuration:** Restricted origins\n\n**API Endpoints:**\nPOST /auth/login           # Authenticate user\nPOST /auth/refresh         # Refresh access token\nPOST /auth/logout          # Logout user\nPOST /auth/forgot-password # Request password reset\nPOST /auth/reset-password  # Reset password with token\nGET  /auth/profile         # Get current user profile\nPUT  /auth/profile         # Update user profile\n\n**Security Headers:**\n- `Authorization: Bearer {access_token}`\n- `X-CSRF-Token: {csrf_token}` (for web clients)\n- Security response headers (HSTS, CSP, etc.)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"3\ufe0f\u20e3-thi\u1ebft-k\u1ebf-database--t\u1ed1i-\u01b0u-h\xf3a",children:["3\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Thi\u1ebft K\u1ebf Database & T\u1ed1i \u01afu H\xf3a"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf T\xecnh hu\u1ed1ng:"})," Thi\u1ebft k\u1ebf database schema v\xe0 optimize performance."]}),"\n",(0,i.jsxs)(n.h4,{id:"\ufe0f-m\u1eabu-thi\u1ebft-k\u1ebf-database-ph\u1ee9c-t\u1ea1p",children:["\ud83d\uddc4\ufe0f ",(0,i.jsx)(n.strong,{children:"M\u1eabu: Thi\u1ebft K\u1ebf Database Ph\u1ee9c T\u1ea1p"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Design database schema cho Multi-tenant E-commerce Platform.\n\n**Business Requirements:**\n- **Multi-tenancy:** Multiple stores on same platform\n- **Product Catalog:** Complex product variations\n- **Order Management:** Complete order lifecycle\n- **Inventory Tracking:** Real-time stock management\n- **User Management:** Customers, store owners, admins\n\n**Core Entities:**\n\n**1. Tenant Management:**\nCREATE TABLE tenants (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name VARCHAR(255) NOT NULL,\n    subdomain VARCHAR(100) UNIQUE NOT NULL,\n    domain VARCHAR(255),\n    plan_type VARCHAR(50) NOT NULL DEFAULT 'basic',\n    status VARCHAR(20) NOT NULL DEFAULT 'active',\n    settings JSONB,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_tenants_subdomain ON tenants(subdomain);\nCREATE INDEX idx_tenants_domain ON tenants(domain);\n\n**2. Product Catalog v\u1edbi Variations:**\nCREATE TABLE products (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    tenant_id UUID NOT NULL REFERENCES tenants(id),\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    base_price DECIMAL(10,2) NOT NULL,\n    sku VARCHAR(100) NOT NULL,\n    category_id UUID REFERENCES categories(id),\n    brand_id UUID REFERENCES brands(id),\n    status VARCHAR(20) DEFAULT 'active',\n    attributes JSONB, -- Flexible attributes\n    seo_data JSONB,   -- SEO metadata\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(tenant_id, sku)\n);\n\nCREATE TABLE product_variants (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    sku VARCHAR(100) NOT NULL,\n    price_adjustment DECIMAL(10,2) DEFAULT 0,\n    stock_quantity INTEGER NOT NULL DEFAULT 0,\n    variant_attributes JSONB, -- Size, Color, etc.\n    is_default BOOLEAN DEFAULT false,\n    UNIQUE(product_id, sku)\n);\n\n**3. Order Management:**\nCREATE TABLE orders (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    tenant_id UUID NOT NULL REFERENCES tenants(id),\n    customer_id UUID REFERENCES customers(id),\n    order_number VARCHAR(50) UNIQUE NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    subtotal DECIMAL(10,2) NOT NULL,\n    tax_amount DECIMAL(10,2) NOT NULL DEFAULT 0,\n    shipping_amount DECIMAL(10,2) NOT NULL DEFAULT 0,\n    total_amount DECIMAL(10,2) NOT NULL,\n    currency VARCHAR(3) NOT NULL DEFAULT 'USD',\n    shipping_address JSONB,\n    billing_address JSONB,\n    payment_status VARCHAR(20) DEFAULT 'pending',\n    fulfillment_status VARCHAR(20) DEFAULT 'unfulfilled',\n    notes TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE order_items (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,\n    product_variant_id UUID NOT NULL REFERENCES product_variants(id),\n    quantity INTEGER NOT NULL CHECK (quantity > 0),\n    unit_price DECIMAL(10,2) NOT NULL,\n    total_price DECIMAL(10,2) NOT NULL,\n    product_snapshot JSONB -- Store product data at time of order\n);\n\n**Performance Optimizations:**\n- **Partitioning:** Orders by tenant_id v\xe0 date\n- **Indexing Strategy:** Composite indexes for common queries\n- **Materialized Views:** For reporting v\xe0 analytics\n- **Connection Pooling:** PgBouncer configuration\n- **Query Optimization:** EXPLAIN ANALYZE for slow queries\n\n**Data Integrity:**\n- **Foreign Key Constraints:** Maintain referential integrity\n- **Check Constraints:** Business rule validation\n- **Triggers:** Audit trails v\xe0 automatic updates\n- **Row Level Security:** Tenant isolation\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-t\u1ed1i-\u01b0u-h\xf3a-query",children:["\ud83d\udd0d ",(0,i.jsx)(n.strong,{children:"M\u1eabu: T\u1ed1i \u01afu H\xf3a Query"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Optimize slow-performing queries trong e-commerce database.\n\n**Scenario:** Product search v\xe0 filtering queries \u0111ang ch\u1eadm.\n\n**Current Slow Query:**\nSELECT p.*, c.name as category_name, b.name as brand_name,\n       AVG(r.rating) as avg_rating, COUNT(r.id) as review_count\nFROM products p\nLEFT JOIN categories c ON p.category_id = c.id\nLEFT JOIN brands b ON p.brand_id = b.id\nLEFT JOIN reviews r ON p.id = r.product_id\nWHERE p.tenant_id = $1\n  AND p.status = 'active'\n  AND p.name ILIKE '%wireless%'\n  AND p.base_price BETWEEN $2 AND $3\n  AND c.name = $4\nGROUP BY p.id, c.name, b.name\nORDER BY avg_rating DESC, p.created_at DESC\nLIMIT 20 OFFSET $5;\n\n**Performance Analysis:**\n1. **EXPLAIN ANALYZE** the query\n2. **Identify bottlenecks:** Sequential scans, expensive sorts\n3. **Check index usage:** Missing or inefficient indexes\n4. **Analyze query plan:** Nested loops vs hash joins\n\n**Optimization Strategy:**\n\n**1. Index Optimization:**\n-- Composite index for common filters\nCREATE INDEX idx_products_tenant_status_price \nON products(tenant_id, status, base_price) \nWHERE status = 'active';\n\n-- Full-text search index\nCREATE INDEX idx_products_name_gin \nON products USING gin(to_tsvector('english', name));\n\n-- Category filtering\nCREATE INDEX idx_products_category_tenant \nON products(category_id, tenant_id, status);\n\n**2. Query Rewrite:**\n-- Split into multiple queries to avoid expensive JOINs\nWITH product_base AS (\n  SELECT id, name, base_price, category_id, brand_id, created_at\n  FROM products \n  WHERE tenant_id = $1 \n    AND status = 'active'\n    AND base_price BETWEEN $2 AND $3\n    AND to_tsvector('english', name) @@ to_tsquery('wireless')\n),\nproduct_ratings AS (\n  SELECT product_id, AVG(rating) as avg_rating, COUNT(*) as review_count\n  FROM reviews \n  WHERE product_id IN (SELECT id FROM product_base)\n  GROUP BY product_id\n)\nSELECT pb.*, c.name as category_name, b.name as brand_name,\n       COALESCE(pr.avg_rating, 0) as avg_rating,\n       COALESCE(pr.review_count, 0) as review_count\nFROM product_base pb\nLEFT JOIN categories c ON pb.category_id = c.id AND c.name = $4\nLEFT JOIN brands b ON pb.brand_id = b.id\nLEFT JOIN product_ratings pr ON pb.id = pr.product_id\nWHERE c.id IS NOT NULL\nORDER BY pr.avg_rating DESC NULLS LAST, pb.created_at DESC\nLIMIT 20 OFFSET $5;\n\n**3. Materialized Views:**\n```sql\n-- Pre-computed product ratings\nCREATE MATERIALIZED VIEW product_ratings_mv AS\nSELECT product_id, \n       AVG(rating) as avg_rating,\n       COUNT(*) as review_count,\n       MAX(created_at) as last_review_at\nFROM reviews \nGROUP BY product_id;\n\nCREATE UNIQUE INDEX ON product_ratings_mv(product_id);\n\n-- Refresh strategy\nCREATE OR REPLACE FUNCTION refresh_product_ratings()\nRETURNS void AS $$\nBEGIN\n  REFRESH MATERIALIZED VIEW CONCURRENTLY product_ratings_mv;\nEND;\n$$ LANGUAGE plpgsql;\n\n**4. Application-Level Optimizations:**\n- **Query result caching** v\u1edbi Redis\n- **Database connection pooling**\n- **Read replicas** cho search queries\n- **Elasticsearch** cho complex search requirements\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"4\ufe0f\u20e3-chi\u1ebfn-l\u01b0\u1ee3c-testing",children:["4\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Chi\u1ebfn L\u01b0\u1ee3c Testing"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf T\xecnh hu\u1ed1ng:"})," Comprehensive testing cho backend services."]}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-unit-testing",children:["\ud83e\uddea ",(0,i.jsx)(n.strong,{children:"M\u1eabu: Unit Testing"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Vi\u1ebft comprehensive unit tests cho ProductService trong Spring Boot.\n\n**Testing Framework:**\n- JUnit 5 + Mockito + AssertJ\n- Testcontainers cho integration tests\n- WireMock cho external service mocking\n\n**Test Structure:**\n\n**1. Service Layer Tests:**\n@ExtendWith(MockitoExtension.class)\nclass ProductServiceTest {\n    \n    @Mock private ProductRepository productRepository;\n    @Mock private CategoryRepository categoryRepository;\n    @Mock private ProductMapper productMapper;\n    @Mock private ProductValidator productValidator;\n    \n    @InjectMocks private ProductServiceImpl productService;\n    \n    @Test\n    @DisplayName("Should create product successfully when valid data provided")\n    void shouldCreateProductSuccessfully() {\n        // Given\n        ProductCreateRequest request = ProductTestData.createValidRequest();\n        Product product = ProductTestData.createProduct();\n        ProductResponse expectedResponse = ProductTestData.createResponse();\n        \n        when(productValidator.validate(request)).thenReturn(ValidationResult.valid());\n        when(categoryRepository.existsById(request.getCategoryId())).thenReturn(true);\n        when(productMapper.toEntity(request)).thenReturn(product);\n        when(productRepository.save(product)).thenReturn(product);\n        when(productMapper.toResponse(product)).thenReturn(expectedResponse);\n        \n        // When\n        ProductResponse actualResponse = productService.createProduct(request);\n        \n        // Then\n        assertThat(actualResponse).isEqualTo(expectedResponse);\n        verify(productRepository).save(product);\n        verifyNoMoreInteractions(productRepository);\n    }\n    \n    @Test\n    @DisplayName("Should throw exception when category not found")\n    void shouldThrowExceptionWhenCategoryNotFound() {\n        // Given\n        ProductCreateRequest request = ProductTestData.createValidRequest();\n        when(categoryRepository.existsById(request.getCategoryId())).thenReturn(false);\n        \n        // When & Then\n        assertThatThrownBy(() -> productService.createProduct(request))\n            .isInstanceOf(CategoryNotFoundException.class)\n            .hasMessage("Category not found with id: " + request.getCategoryId());\n            \n        verify(productRepository, never()).save(any());\n    }\n}\n\n**2. Repository Tests:**\n@DataJpaTest\n@TestPropertySource(properties = {\n    "spring.jpa.hibernate.ddl-auto=create-drop",\n    "spring.datasource.url=jdbc:h2:mem:testdb"\n})\nclass ProductRepositoryTest {\n    \n    @Autowired private TestEntityManager entityManager;\n    @Autowired private ProductRepository productRepository;\n    \n    @Test\n    @DisplayName("Should find products by category and price range")\n    void shouldFindProductsByCategoryAndPriceRange() {\n        // Given\n        Category category = CategoryTestData.createCategory();\n        entityManager.persistAndFlush(category);\n        \n        Product product1 = ProductTestData.createProduct(category, new BigDecimal("100.00"));\n        Product product2 = ProductTestData.createProduct(category, new BigDecimal("200.00"));\n        Product product3 = ProductTestData.createProduct(category, new BigDecimal("300.00"));\n        \n        entityManager.persistAndFlush(product1);\n        entityManager.persistAndFlush(product2);\n        entityManager.persistAndFlush(product3);\n        \n        // When\n        List<Product> results = productRepository.findByCategoryAndPriceRange(\n            category.getId(), \n            new BigDecimal("150.00"), \n            new BigDecimal("250.00")\n        );\n        \n        // Then\n        assertThat(results).hasSize(1);\n        assertThat(results.get(0).getBasePrice()).isEqualTo(new BigDecimal("200.00"));\n    }\n}\n\n**3. Test Data Builders:**\npublic class ProductTestData {\n    \n    public static ProductCreateRequest createValidRequest() {\n        return ProductCreateRequest.builder()\n            .name("Test Product")\n            .description("Test Description")\n            .basePrice(new BigDecimal("99.99"))\n            .sku("TEST-001")\n            .categoryId(1L)\n            .stockQuantity(100)\n            .build();\n    }\n    \n    public static Product createProduct() {\n        return Product.builder()\n            .id(1L)\n            .name("Test Product")\n            .description("Test Description")\n            .basePrice(new BigDecimal("99.99"))\n            .sku("TEST-001")\n            .stockQuantity(100)\n            .isActive(true)\n            .createdAt(Instant.now())\n            .build();\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-integration-testing",children:["\ud83d\udd17 ",(0,i.jsx)(n.strong,{children:"M\u1eabu: Integration Testing"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Vi\u1ebft integration tests cho Product API endpoints.\n\n**Test Setup:**\n- **Testcontainers:** PostgreSQL container cho database\n- **MockWebServer:** Mock external services\n- **TestRestTemplate:** API endpoint testing\n\n**Integration Test Structure:**\n\n**1. API Integration Tests:**\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@Testcontainers\nclass ProductControllerIntegrationTest {\n    \n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15")\n            .withDatabaseName("testdb")\n            .withUsername("test")\n            .withPassword("test");\n    \n    @Autowired private TestRestTemplate restTemplate;\n    @Autowired private ProductRepository productRepository;\n    @Autowired private CategoryRepository categoryRepository;\n    \n    @DynamicPropertySource\n    static void configureProperties(DynamicPropertyRegistry registry) {\n        registry.add("spring.datasource.url", postgres::getJdbcUrl);\n        registry.add("spring.datasource.username", postgres::getUsername);\n        registry.add("spring.datasource.password", postgres::getPassword);\n    }\n    \n    @Test\n    @Sql("/test-data/categories.sql")\n    @DisplayName("Should create product and return 201 status")\n    void shouldCreateProductSuccessfully() {\n        // Given\n        ProductCreateRequest request = ProductTestData.createValidRequest();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setBearerAuth(getValidJwtToken());\n        HttpEntity<ProductCreateRequest> entity = new HttpEntity<>(request, headers);\n        \n        // When\n        ResponseEntity<ProductResponse> response = restTemplate.postForEntity(\n            "/api/v1/products", \n            entity, \n            ProductResponse.class\n        );\n        \n        // Then\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n        assertThat(response.getBody()).isNotNull();\n        assertThat(response.getBody().getName()).isEqualTo(request.getName());\n        \n        // Verify database state\n        Optional<Product> savedProduct = productRepository.findBySku(request.getSku());\n        assertThat(savedProduct).isPresent();\n    }\n    \n    @Test\n    @DisplayName("Should return 400 when validation fails")\n    void shouldReturnBadRequestForInvalidData() {\n        // Given\n        ProductCreateRequest invalidRequest = ProductCreateRequest.builder()\n            .name("") // Invalid: empty name\n            .basePrice(new BigDecimal("-10.00")) // Invalid: negative price\n            .build();\n            \n        HttpHeaders headers = new HttpHeaders();\n        headers.setBearerAuth(getValidJwtToken());\n        HttpEntity<ProductCreateRequest> entity = new HttpEntity<>(invalidRequest, headers);\n        \n        // When\n        ResponseEntity<ErrorResponse> response = restTemplate.postForEntity(\n            "/api/v1/products", \n            entity, \n            ErrorResponse.class\n        );\n        \n        // Then\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);\n        assertThat(response.getBody().getErrors()).hasSize(2);\n    }\n}\n\n**2. Database Integration Tests:**\n@DataJpaTest\n@Testcontainers\nclass ProductRepositoryIntegrationTest {\n    \n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15");\n    \n    @Test\n    @Transactional\n    @DisplayName("Should handle concurrent product updates correctly")\n    void shouldHandleConcurrentUpdates() throws InterruptedException {\n        // Given\n        Product product = ProductTestData.createProduct();\n        entityManager.persistAndFlush(product);\n        \n        CountDownLatch latch = new CountDownLatch(2);\n        AtomicInteger successCount = new AtomicInteger(0);\n        AtomicInteger failureCount = new AtomicInteger(0);\n        \n        // When - Simulate concurrent updates\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        \n        executor.submit(() -> {\n            try {\n                productRepository.updateStock(product.getId(), 10);\n                successCount.incrementAndGet();\n            } catch (Exception e) {\n                failureCount.incrementAndGet();\n            } finally {\n                latch.countDown();\n            }\n        });\n        \n        executor.submit(() -> {\n            try {\n                productRepository.updateStock(product.getId(), -5);\n                successCount.incrementAndGet();\n            } catch (Exception e) {\n                failureCount.incrementAndGet();\n            } finally {\n                latch.countDown();\n            }\n        });\n        \n        latch.await(5, TimeUnit.SECONDS);\n        \n        // Then\n        assertThat(successCount.get()).isEqualTo(2);\n        assertThat(failureCount.get()).isEqualTo(0);\n        \n        Product updatedProduct = productRepository.findById(product.getId()).orElseThrow();\n        assertThat(updatedProduct.getStockQuantity()).isEqualTo(105); // 100 + 10 - 5\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"5\ufe0f\u20e3-hi\u1ec7u-su\u1ea5t--gi\xe1m-s\xe1t",children:["5\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Hi\u1ec7u Su\u1ea5t & Gi\xe1m S\xe1t"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf T\xecnh hu\u1ed1ng:"})," Optimize performance v\xe0 implement monitoring."]}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-t\u1ed1i-\u01b0u-h\xf3a-hi\u1ec7u-su\u1ea5t",children:["\u26a1 ",(0,i.jsx)(n.strong,{children:"M\u1eabu: T\u1ed1i \u01afu H\xf3a Hi\u1ec7u Su\u1ea5t"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Optimize Spring Boot application performance cho high-traffic e-commerce system.\n\n**Performance Goals:**\n- **Response Time:** P95 < 200ms cho API calls\n- **Throughput:** 1000+ requests/second\n- **Memory Usage:** < 2GB heap size\n- **Database:** < 50ms query response time\n\n**Optimization Areas:**\n\n**1. JVM Tuning:**\n# Production JVM settings\n-Xms2g -Xmx2g\n-XX:+UseG1GC\n-XX:MaxGCPauseMillis=200\n-XX:+UseStringDeduplication\n-XX:+OptimizeStringConcat\n-Dspring.profiles.active=prod\n\n**2. Database Optimization:**\n@Configuration\npublic class DatabaseConfig {\n    \n    @Bean\n    @Primary\n    public DataSource primaryDataSource() {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl(env.getProperty("spring.datasource.url"));\n        config.setUsername(env.getProperty("spring.datasource.username"));\n        config.setPassword(env.getProperty("spring.datasource.password"));\n        \n        // Connection pool optimization\n        config.setMaximumPoolSize(20);\n        config.setMinimumIdle(5);\n        config.setConnectionTimeout(30000);\n        config.setIdleTimeout(600000);\n        config.setMaxLifetime(1800000);\n        config.setLeakDetectionThreshold(60000);\n        \n        return new HikariDataSource(config);\n    }\n    \n    @Bean\n    @Qualifier("readOnly")\n    public DataSource readOnlyDataSource() {\n        // Configure read replica connection\n        return createReadOnlyDataSource();\n    }\n}\n\n**3. Caching Strategy:**\n@Service\n@CacheConfig(cacheNames = "products")\npublic class ProductService {\n    \n    @Cacheable(key = "#id", unless = "#result == null")\n    public ProductResponse getProduct(Long id) {\n        return productRepository.findById(id)\n            .map(productMapper::toResponse)\n            .orElseThrow(() -> new ProductNotFoundException(id));\n    }\n    \n    @CacheEvict(key = "#result.id")\n    public ProductResponse updateProduct(Long id, ProductUpdateRequest request) {\n        // Update logic\n    }\n    \n    @Cacheable(key = "\'search:\' + #searchCriteria.hashCode()", \n               condition = "#searchCriteria.cacheable")\n    public Page<ProductResponse> searchProducts(ProductSearchCriteria searchCriteria) {\n        // Search implementation\n    }\n}\n\n@Configuration\n@EnableCaching\npublic class CacheConfig {\n    \n    @Bean\n    public CacheManager cacheManager() {\n        RedisCacheManager.Builder builder = RedisCacheManager\n            .RedisCacheManagerBuilder\n            .fromConnectionFactory(redisConnectionFactory())\n            .cacheDefaults(cacheConfiguration());\n            \n        return builder.build();\n    }\n    \n    private RedisCacheConfiguration cacheConfiguration() {\n        return RedisCacheConfiguration.defaultCacheConfig()\n            .entryTtl(Duration.ofMinutes(10))\n            .serializeKeysWith(RedisSerializationContext.SerializationPair\n                .fromSerializer(new StringRedisSerializer()))\n            .serializeValuesWith(RedisSerializationContext.SerializationPair\n                .fromSerializer(new GenericJackson2JsonRedisSerializer()));\n    }\n}\n\n**4. Async Processing:**\n@Service\npublic class OrderService {\n    \n    @Async("taskExecutor")\n    public CompletableFuture<Void> processOrderAsync(Order order) {\n        // Heavy processing logic\n        inventoryService.reserveItems(order.getItems());\n        paymentService.processPayment(order.getPayment());\n        emailService.sendConfirmation(order.getCustomer());\n        \n        return CompletableFuture.completedFuture(null);\n    }\n}\n\n@Configuration\n@EnableAsync\npublic class AsyncConfig {\n    \n    @Bean(name = "taskExecutor")\n    public TaskExecutor taskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(10);\n        executor.setMaxPoolSize(50);\n        executor.setQueueCapacity(100);\n        executor.setThreadNamePrefix("async-task-");\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        executor.initialize();\n        return executor;\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"-m\u1eabu-gi\xe1m-s\xe1t--observability",children:["\ud83d\udcca ",(0,i.jsx)(n.strong,{children:"M\u1eabu: Gi\xe1m S\xe1t & Observability"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Implement comprehensive monitoring cho Spring Boot application.\n\n**Monitoring Stack:**\n- **Metrics:** Micrometer + Prometheus\n- **Logging:** Logback + ELK Stack\n- **Tracing:** Spring Cloud Sleuth + Zipkin\n- **Health Checks:** Spring Boot Actuator\n- **Alerting:** Grafana + AlertManager\n\n**Implementation:**\n\n**1. Metrics Configuration:**\n@Configuration\npublic class MetricsConfig {\n    \n    @Bean\n    public TimedAspect timedAspect(MeterRegistry registry) {\n        return new TimedAspect(registry);\n    }\n    \n    @Bean\n    public CounterService counterService(MeterRegistry registry) {\n        return new CounterService(registry);\n    }\n}\n\n@RestController\n@Timed(name = "product.api", description = "Product API operations")\npublic class ProductController {\n    \n    private final Counter productCreatedCounter;\n    private final Timer productSearchTimer;\n    \n    public ProductController(MeterRegistry registry) {\n        this.productCreatedCounter = Counter.builder("product.created")\n            .description("Number of products created")\n            .tag("api", "product")\n            .register(registry);\n            \n        this.productSearchTimer = Timer.builder("product.search.duration")\n            .description("Product search duration")\n            .register(registry);\n    }\n    \n    @PostMapping\n    public ResponseEntity<ProductResponse> createProduct(@RequestBody ProductCreateRequest request) {\n        ProductResponse response = productService.createProduct(request);\n        productCreatedCounter.increment();\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n    \n    @GetMapping("/search")\n    public ResponseEntity<Page<ProductResponse>> searchProducts(ProductSearchCriteria criteria) {\n        return Timer.Sample.start(registry)\n            .stop(productSearchTimer)\n            .recordCallable(() -> {\n                Page<ProductResponse> results = productService.searchProducts(criteria);\n                return ResponseEntity.ok(results);\n            });\n    }\n}\n\n**2. Logging C\xf3 C\u1ea5u Tr\xfac:**\n@Component\npublic class AuditLogger {\n    \n    private final Logger logger = LoggerFactory.getLogger(AuditLogger.class);\n    private final ObjectMapper objectMapper;\n    \n    public void logProductCreated(ProductResponse product, String userId) {\n        AuditEvent event = AuditEvent.builder()\n            .eventType("PRODUCT_CREATED")\n            .userId(userId)\n            .resourceId(product.getId().toString())\n            .resourceType("PRODUCT")\n            .timestamp(Instant.now())\n            .details(Map.of("productName", product.getName(), "sku", product.getSku()))\n            .build();\n            \n        logger.info("audit_event={}", toJson(event));\n    }\n    \n    public void logApiCall(String endpoint, String method, int statusCode, long duration) {\n        ApiCallEvent event = ApiCallEvent.builder()\n            .endpoint(endpoint)\n            .method(method)\n            .statusCode(statusCode)\n            .duration(duration)\n            .timestamp(Instant.now())\n            .build();\n            \n        logger.info("api_call={}", toJson(event));\n    }\n}\n\n**3. Ki\u1ec3m Tra S\u1ee9c Kh\u1ecfe:**\n@Component\npublic class CustomHealthIndicator implements HealthIndicator {\n    \n    private final ProductRepository productRepository;\n    private final RedisTemplate<String, String> redisTemplate;\n    \n    @Override\n    public Health health() {\n        try {\n            // Check database connectivity\n            long productCount = productRepository.count();\n            \n            // Check Redis connectivity\n            redisTemplate.opsForValue().set("health:check", "ok", Duration.ofSeconds(30));\n            \n            // Check external service\n            boolean externalServiceUp = checkExternalService();\n            \n            if (externalServiceUp) {\n                return Health.up()\n                    .withDetail("database", "UP")\n                    .withDetail("redis", "UP")\n                    .withDetail("external-service", "UP")\n                    .withDetail("product-count", productCount)\n                    .build();\n            } else {\n                return Health.down()\n                    .withDetail("external-service", "DOWN")\n                    .build();\n            }\n        } catch (Exception e) {\n            return Health.down()\n                .withDetail("error", e.getMessage())\n                .build();\n        }\n    }\n}\n\n**4. Theo D\xf5i Ph\xe2n T\xe1n:**\n# application.yml\nspring:\n  sleuth:\n    zipkin:\n      base-url: http://zipkin:9411\n    sampler:\n      probability: 0.1  # Sample 10% of requests\n  application:\n    name: product-service\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,info,metrics,prometheus\n  endpoint:\n    health:\n      show-details: always\n  metrics:\n    export:\n      prometheus:\n        enabled: true\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-best-practices--tips",children:"\ud83c\udfaf Best Practices & Tips"}),"\n",(0,i.jsxs)(n.h3,{id:"-tip-prompt-engineering",children:["\ud83d\udca1 ",(0,i.jsx)(n.strong,{children:"Tip Prompt Engineering"})]}),"\n",(0,i.jsxs)(n.h4,{id:"-prompting-hi\u1ec7u-qu\u1ea3-cho-backend",children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Prompting Hi\u1ec7u Qu\u1ea3 cho Backend:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:'\u2705 "Implement ProductService trong Spring Boot v\u1edbi JPA, validation, \n   exception handling, v\xe0 unit tests. Include DTO mapping v\u1edbi MapStruct."\n\n\u274c "T\u1ea1o service cho product"\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"\ufe0f-context-is-king",children:["\ud83c\udfd7\ufe0f ",(0,i.jsx)(n.strong,{children:"Context IS KING:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"**Lu\xf4n ch\u1ec9 \u0111\u1ecbnh:**\n- Framework version (Spring Boot 3.2, .NET 8)\n- Database type (PostgreSQL, MySQL, MongoDB)\n- Architecture pattern (Layered, Clean, Hexagonal)\n- Testing framework (JUnit 5, xUnit, Mocha)\n- Additional tools (Docker, Redis, Elasticsearch)\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"-ph\xe1t-tri\u1ec3n-l\u1eb7p-l\u1ea1i",children:["\ud83d\udd04 ",(0,i.jsx)(n.strong,{children:"Ph\xe1t Tri\u1ec3n L\u1eb7p L\u1ea1i:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:'1. **B\u1eaft \u0111\u1ea7u v\u1edbi c\u1ea5u tr\xfac:** "T\u1ea1o basic CRUD operations"\n2. **Th\xeam business logic:** "Implement validation rules"\n3. **Th\xeam b\u1ea3o m\u1eadt:** "Add JWT authentication"\n4. **Th\xeam gi\xe1m s\xe1t:** "Add metrics v\xe0 logging"\n5. **T\u1ed1i \u01b0u h\xf3a:** "Add caching v\xe0 performance tuning"\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"-k\u1ef9-thu\u1eadt-n\xe2ng-cao",children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"K\u1ef9 Thu\u1eadt N\xe2ng Cao"})]}),"\n",(0,i.jsxs)(n.h4,{id:"-tham-kh\u1ea3o-m\xe3-hi\u1ec7n-c\xf3",children:["\ud83d\udcda ",(0,i.jsx)(n.strong,{children:"Tham Kh\u1ea3o M\xe3 Hi\u1ec7n C\xf3:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:'"Implement OrderService t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ProductService trong @/services/ProductService.java\n nh\u01b0ng v\u1edbi additional business rules cho order processing"\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"-chu\u1ed7i-workflows-ph\u1ee9c-t\u1ea1p",children:["\ud83d\udd17 ",(0,i.jsx)(n.strong,{children:"Chu\u1ed7i Workflows Ph\u1ee9c T\u1ea1p:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:'Prompt 1: "Design database schema"\nPrompt 2: "Generate JPA entities"\nPrompt 3: "Create repository layer"\nPrompt 4: "Implement service layer"\nPrompt 5: "Add REST controllers"\nPrompt 6: "Write comprehensive tests"\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"\ud83d\udca1 Pro Tips",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"C\u1ee5 th\u1ec3 v\u1ec1 r\xe0ng bu\u1ed9c:"})," K\xedch th\u01b0\u1edbc database, y\xeau c\u1ea7u hi\u1ec7u su\u1ea5t, nhu c\u1ea7u b\u1ea3o m\u1eadt"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bao g\u1ed3m k\u1ecbch b\u1ea3n l\u1ed7i:"})," C\xe1ch x\u1eed l\xfd failures, timeouts, data inconsistencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ch\u1ec9 \u0111\u1ecbnh y\xeau c\u1ea7u testing:"})," Unit tests, integration tests, performance tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Xem x\xe9t scalability:"})," Horizontal scaling, caching strategies, async processing"]}),"\n"]})}),"\n",(0,i.jsx)(n.admonition,{title:"\u26a0\ufe0f L\u01b0u \xdd B\u1ea3o M\u1eadt",type:"warning",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kh\xf4ng bao gi\u1edd expose d\u1eef li\u1ec7u nh\u1ea1y c\u1ea3m:"})," Database credentials, API keys, th\xf4ng tin c\xe1 nh\xe2n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validate t\u1ea5t c\u1ea3 inputs:"})," SQL injection, XSS, data validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement authentication \u0111\xfang c\xe1ch:"})," JWT tokens, role-based access control"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S\u1eed d\u1ee5ng parameterized queries:"})," Ng\u0103n ch\u1eb7n SQL injection attacks"]}),"\n"]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);